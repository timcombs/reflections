What happens when you initialize a repository? Why do you need to do it?

  When you initialize a repository into git it adds a metaData file that assists in tracking the changes. This gets it ready for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is the place you collect what files you want to commit. The repository holds the files and the information about the tracked changes. The working directory is directory of files you are manipulating

  The staging area allows you to double check to make sure you are committing the right files and not the wrong ones so you don't push confidential info, etc.

How can you use the staging area to make sure you have one commit per logical
change?

  To commit each logical change only add files to the staging area that reflect that logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches are helpful in keeping history organized by providing logical paths to follow down that might not be workable code. Every branches' development is separate from each other, though they may have a comfortable starting point. I have an art project I am working on that could have been more easily done using branches now that I think about it.

How do the diagrams help you visualize the branch structure?

  Diagrams of the branch structure really show the pathways through the changes, you can see the nodes the branches break from and what changes that are impossible to get back to.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  The two branches are merged together into one path. What is fascinating is how it takes the commits and interleaves them into order by time stamp. Using git show makes it easy to see the changes between parent and child commits. We represent it in the diagram as coming together for this reason.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

  Pros of automatic merging are that it simplifies a lot of busy work of going through 100s of lines of code manually. Con is that it often gives you merge conflicts with things you would already know.
